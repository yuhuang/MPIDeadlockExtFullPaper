
# non-deterministic deadlock without message starvation like tests/fixtures/2.ctp
# except another process has been added that poses problems for the abstract machine
#
# when executed in the abstract machine, the action (s 2 3 0) issues two sends:
# one on the endpoint (2, 3)
# and one on the endpoint (-1, 3)
#
# the wildcard receive in process 3 matches with the second send
# and the subsequent receive matches with the first one
#
# the machine determines that the deadlock candidate [(w 0 2), (w 1 2), (w 2 2)] is reachable
# but it returns an _unreachable_ control point [(w 0 2), (w 1 2), (w 2 2), (w 3 2)]
#
# this causes the deadlock to go undetected by the analysis as is
# something needs to be introduced to either
# allow the encoding to work with partial control points e.g. [(w 0 3 2), (w 1 3 2), (w 2 3 2)]
# or realize that the action (r 3 2 2) will never be matched in the deadlock execution
#
# we should remember that the key to constructing a counter example like this was exploiting
# the behavior of the abstract machine that generates two send actions for every send in the
# original program

s 0 1 0
w 0 0
s 0 2 2
w 0 2
s 0 1 4
w 0 4

r 1 -1 0
w 1 0
r 1 0 2
w 1 2
r 1 -1 4
w 1 4

s 2 3 0
w 2 0
s 2 1 2
w 2 2
r 2 0 4
w 2 4
s 2 3 6
w 2 6

r 3 -1 0
w 3 0
r 3 2 2
w 3 2

